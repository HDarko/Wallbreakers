 /*
 Problem:
 
 Given a non-empty array of digits representing a non-negative integer, plus one to the integer.

The digits are stored such that the most significant digit is at the head of the list,
and each element in the array contain a single digit.

You may assume the integer does not contain any leading zero, except the number 0 itself.
 
 Notes:
 
 Originally just gonna directly increase the integer but
 once I saw the test cases of [9] and [9,9], I need to reiterate my
 program.
 I decided to iterate backwards towards the front of vector and 
 adjust any 9s to 0, if we reach a
 non 9 number then we add 1 and stop the loop, else if the most
 significant bit is also a 9 then we convert that to a 1 and add a 0 to end of 
 vector.
 */
 /*
 According to LeetCode at the time I did this.
 Runtime: 8 ms, faster than 16.86% of C++ online submissions for Plus One.
Memory Usage: 8.5 MB, less than 51.86% of C++ online submissions for Plus One.
 */
 class Solution {
public:
    vector<string> fizzBuzz(int n) {
        vector<string> result;
        for(int num=1; num<=n;num++)
        {
            if((num%15)==0)
            {
                result.push_back("FizzBuzz");
            }
            else if(num%5==0)
            {
                   result.push_back("Buzz");
            }
            else if(num%3==0)
            {
                   result.push_back("Fizz");
            }
              else
            {
                 result.push_back(to_string(num));
            }
             
             
        }
        return result;
        
    }
};
